# File: skaffold.yaml
apiVersion: skaffold/v4beta7 # Use a recent stable Skaffold API version
kind: Config
metadata:
  name: gen-erics-pacs

build:
  # Tell Skaffold how to build images locally (using Docker/Rancher Desktop)
  local:
    push: false           # Don't push images for local clusters like k3d (Skaffold loads them directly)
    useBuildkit: true    # Use Docker BuildKit for potentially faster builds
    # useDockerCLI: true # Can force using 'docker build' if needed

  # Define the container images Skaffold should build
  artifacts:
    # --- Backend Image ---
    - image: gen-erics-backend-skaffold # Use a simple name for Skaffold reference
      context: backend                  # Path to the source code and Dockerfile relative to skaffold.yaml
      docker:
        dockerfile: Dockerfile          # Name of the Dockerfile within the context
      # --- ADD HOOKS SECTION ---
      hooks:
        before: # Run commands on the host *before* 'docker build' starts
          - command: ['sh', '-c', 'cd backend && echo "Running go mod tidy & vendor..." && go mod tidy && go mod vendor']
              # Optional: Specify OS if needed, but sh -c is fairly portable
              # os: [darwin, linux]
      # --- END HOOKS SECTION ---

    # --- Frontend Image ---
    - image: gen-erics-frontend-skaffold # Use a simple name for Skaffold reference
      context: frontend                 # Path to the source code and Dockerfile
      docker:
        dockerfile: Dockerfile          # Name of the Dockerfile within the context
      # Sync static files for faster frontend dev (optional but recommended)
      # sync:
      #   manual:
          # When files change in src/, public/, or top-level html/css/js...
          # - src: 'index.html'
          #   dest: /usr/share/nginx/html # Destination inside the running container
          # - src: 'style.css'
          #   dest: /usr/share/nginx/html
          # - src: 'main.js' # Or 'src/**/*.js', 'src/**/*.css' if using src dir
          #   dest: /usr/share/nginx/html
          # Add other frontend source dirs/files if needed (e.g., 'src/**/*')
          # NOTE: If your Vite build step produces a 'dist' folder and your nginx
          # container serves from 'dist', you might sync differently or rely
          # on Skaffold's auto-rebuild triggered by source changes.
          # Let's start with syncing source directly to where nginx serves.

deploy:
  # Tell Skaffold to use Helm to deploy
  helm:
    # List the Helm releases Skaffold should manage
    releases:
      - name: dev                     # Your Helm release name
        chartPath: infrastructure/helm/gen-erics # Path to your application's chart
        namespace: default            # Namespace to deploy into
        # Paths are relative to skaffold.yaml
        valuesFiles:
          - infrastructure/gen-erics-values.yaml # Your main values file
        # --- IMPORTANT: Inject built image tags into Helm values ---
        setValueTemplates:
          # Key is the path in values.yaml, Value uses Skaffold's built-in variables
          # Uses the simple image names defined in build.artifacts above
          backend.image.repository: "{{.IMAGE_REPO_gen_erics_backend_skaffold}}" # Pass full repo if needed, or just use tag below
          backend.image.tag: "{{.IMAGE_TAG_gen_erics_backend_skaffold}}"        # Pass unique tag generated by Skaffold
          frontend.image.repository: "{{.IMAGE_REPO_gen_erics_frontend_skaffold}}"
          frontend.image.tag: "{{.IMAGE_TAG_gen_erics_frontend_skaffold}}"
        # ---------------------------------------------------------
        skipBuildDependencies: false # Make sure Helm dependencies (like PostgreSQL) are handled
        wait: true                  # Wait for deployed resources to become ready

# Optional: Define port-forwarding rules (alternative to manually running kubectl port-forward)
# portForward:
# - resourceType: service
#   resourceName: dev-gen-erics-frontend # Your frontend service name
#   namespace: default
#   port: 80
#   localPort: 9000 # Access frontend via localhost:9000
# - resourceType: service
#   resourceName: dev-postgresql # Your postgres service name
#   namespace: default
#   port: 5432
#   localPort: 5433 # Access postgres via localhost:5433
# - resourceType: service
#   resourceName: signoz-frontend # Your SigNoz service name
#   namespace: observability
#   port: 80 # Check SigNoz service port
#   localPort: 9001 # Access SigNoz via localhost:9001